// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type GroupType string

const (
	GroupTypePublic     GroupType = "public"
	GroupTypeInviteOnly GroupType = "invite_only"
	GroupTypePrivate    GroupType = "private"
)

func (e *GroupType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GroupType(s)
	case string:
		*e = GroupType(s)
	default:
		return fmt.Errorf("unsupported scan type for GroupType: %T", src)
	}
	return nil
}

type NullGroupType struct {
	GroupType GroupType
	Valid     bool // Valid is true if GroupType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGroupType) Scan(value interface{}) error {
	if value == nil {
		ns.GroupType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GroupType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGroupType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GroupType), nil
}

type MemberType string

const (
	MemberTypeMember    MemberType = "member"
	MemberTypeModerator MemberType = "moderator"
	MemberTypeAdmin     MemberType = "admin"
	MemberTypeBlocked   MemberType = "blocked"
)

func (e *MemberType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MemberType(s)
	case string:
		*e = MemberType(s)
	default:
		return fmt.Errorf("unsupported scan type for MemberType: %T", src)
	}
	return nil
}

type NullMemberType struct {
	MemberType MemberType
	Valid      bool // Valid is true if MemberType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMemberType) Scan(value interface{}) error {
	if value == nil {
		ns.MemberType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MemberType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMemberType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MemberType), nil
}

type Relationship string

const (
	RelationshipPending Relationship = "pending"
	RelationshipFriends Relationship = "friends"
	RelationshipBlocked Relationship = "blocked"
)

func (e *Relationship) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Relationship(s)
	case string:
		*e = Relationship(s)
	default:
		return fmt.Errorf("unsupported scan type for Relationship: %T", src)
	}
	return nil
}

type NullRelationship struct {
	Relationship Relationship
	Valid        bool // Valid is true if Relationship is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationship) Scan(value interface{}) error {
	if value == nil {
		ns.Relationship, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Relationship.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationship) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Relationship), nil
}

type Group struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	CreatorID uuid.UUID
	GroupType GroupType
}

type InvitationLink struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	OfGroupID uuid.UUID
	ExpiresAt time.Time
}

type RefreshToken struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

type Relation struct {
	CreatedAt    time.Time
	UpdatedAt    time.Time
	UserID       uuid.UUID
	ReceiverID   uuid.UUID
	Relationship Relationship
}

type User struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Login     string
	Password  string
	Email     string
}

type UsersGroup struct {
	CreatedAt  time.Time
	UpdatedAt  time.Time
	UserID     uuid.UUID
	OfGroupID  uuid.UUID
	MemberType MemberType
}
