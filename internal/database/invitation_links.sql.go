// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invitation_links.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearInvitationLinks = `-- name: ClearInvitationLinks :exec
DELETE FROM invitation_links
WHERE expires_at < NOW()
`

func (q *Queries) ClearInvitationLinks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearInvitationLinks)
	return err
}

const createInvitationLink = `-- name: CreateInvitationLink :one
INSERT INTO invitation_links (token, created_at, updated_at, of_group_id, expires_at)
VALUES (
  $1,
  NOW(),
  NOW(),
  $2,
  $3
)
RETURNING token, created_at, updated_at, of_group_id, expires_at
`

type CreateInvitationLinkParams struct {
	Token     string
	OfGroupID uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateInvitationLink(ctx context.Context, arg CreateInvitationLinkParams) (InvitationLink, error) {
	row := q.db.QueryRowContext(ctx, createInvitationLink, arg.Token, arg.OfGroupID, arg.ExpiresAt)
	var i InvitationLink
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OfGroupID,
		&i.ExpiresAt,
	)
	return i, err
}
