// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: groups.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const changeType = `-- name: ChangeType :exec
UPDATE groups
SET group_type = $2, updated_at = NOW()
WHERE id = $1
`

type ChangeTypeParams struct {
	ID        uuid.UUID
	GroupType GroupType
}

func (q *Queries) ChangeType(ctx context.Context, arg ChangeTypeParams) error {
	_, err := q.db.ExecContext(ctx, changeType, arg.ID, arg.GroupType)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (id, created_at, updated_at, name, creator_id, group_type)
VALUES (
  $1,
  NOW(),
  NOW(),
  $2,
  $3,
  $4
)
RETURNING id, created_at, updated_at, name, creator_id, group_type
`

type CreateGroupParams struct {
	ID        uuid.UUID
	Name      string
	CreatorID uuid.UUID
	GroupType GroupType
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.ID,
		arg.Name,
		arg.CreatorID,
		arg.GroupType,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CreatorID,
		&i.GroupType,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, created_at, updated_at, name, creator_id, group_type FROM groups
WHERE groups.id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CreatorID,
		&i.GroupType,
	)
	return i, err
}

const getPublicGroups = `-- name: GetPublicGroups :many
SELECT id, groups.created_at, groups.updated_at, name, creator_id, group_type, users_groups.created_at, users_groups.updated_at, user_id, of_group_id, member_type, COUNT(users_groups.*) AS users_count
FROM groups INNER JOIN users_groups
ON groups.id = users_groups.of_group_id
WHERE groups.group_type = 'public' AND groups.name LIKE '%' || $1 || '%'
GROUP BY groups.id
ORDER BY users_count DESC
`

type GetPublicGroupsRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	CreatorID   uuid.UUID
	GroupType   GroupType
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	UserID      uuid.UUID
	OfGroupID   uuid.UUID
	MemberType  MemberType
	UsersCount  int64
}

func (q *Queries) GetPublicGroups(ctx context.Context, dollar_1 sql.NullString) ([]GetPublicGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPublicGroups, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPublicGroupsRow
	for rows.Next() {
		var i GetPublicGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CreatorID,
			&i.GroupType,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.UserID,
			&i.OfGroupID,
			&i.MemberType,
			&i.UsersCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameGroup = `-- name: RenameGroup :exec
UPDATE groups
SET name = $2, updated_at = NOW()
WHERE id = $1
`

type RenameGroupParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) RenameGroup(ctx context.Context, arg RenameGroupParams) error {
	_, err := q.db.ExecContext(ctx, renameGroup, arg.ID, arg.Name)
	return err
}
